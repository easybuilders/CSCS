# @author: jg (CSCS)
easyblock = 'ConfigureMake'

name = 'Score-P'
version = '7.1'
homepage = 'http://www.score-p.org'
description = """The Score-P measurement infrastructure is a highly scalable
and easy-to-use tool suite for profiling, event tracing, and online analysis of
HPC applications."""
toolchain = {'name': 'CrayNvidia', 'version': '21.09'}
toolchainopts = {'pic': True}
source_urls = ['http://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-%(version)s']
sources = ['scorep-%(version)s.tar.gz']
# patches = ['%(name)s-%(version)s.patch']
dependencies = [
    # bfd from binutils: "compiler instrumentation: yes, using libbfd"
    ('binutils', '2.38', '', True),
    ('libunwind', '1.5.0', '', True),
    ('CubeLib', '4.6'),
    ('CubeW', '4.6'),
    # ('CubeGUI', '4.4.4', '', True),
    ('OPARI2', '2.0.6', '', True),
    # ('PDT', '3.25.1', '', True),
    # ('SIONlib', '1.7.6l'),
    ('vampir', '10.0.0', '', True),
    # OTF2: will build with internal/scorep version of otf2, keeping as remind
    # PR3501 ('OTF2', '2.0', '', True),
    # PAPI: will build with papi from perftools-base, keeping as reminder
    # ('gcc/10.3.0', EXTERNAL_MODULE),
]

# plugins are needed, do not use this configopts = ' --disable-gcc-plugin'
configopts = (
    '--with-machine-name=pizdaint --enable-shared '
    '--with-libpmi-include=/opt/cray/pe/pmi/default/include '
    '--with-libpmi-lib=/opt/cray/pe/pmi/default/lib64 '
    '--with-librca-include=/opt/cray/rca/default/include '
    '--with-librca-lib=/opt/cray/rca/default/lib64 '
    '--with-papi-header=/opt/cray/pe/papi/default/include '
    '--with-papi-lib=/opt/cray/pe/papi/default/lib64 '
    '--with-libunwind=$EBROOTLIBUNWIND '
    '--with-libbfd=$EBROOTBINUTILS '
    '--with-opari2=$EBROOTOPARI2/bin '
    '--with-cubew=$EBROOTCUBEW/bin --with-cubelib=$EBROOTCUBELIB/bin '
)
configopts += (
    '--enable-cuda --with-nocross-compiler-suite=pgi '
    '--with-libcudart=$NVIDIA_PATH/cuda '
    '--with-libcuda-lib=$NVIDIA_PATH/cuda/lib64/stubs '
    '--with-libcuda-include=$NVIDIA_PATH/cuda/include '
    '--with-libcupti=$NVIDIA_PATH/cuda/11.2/extras/CUPTI '
    '--with-libnvidia-ml-include=$NVIDIA_PATH/cuda/11.2/targets/x86_64-linux/include '
    '--with-libnvidia-ml-lib=$NVIDIA_PATH/cuda/11.2/targets/x86_64-linux/lib/stubs '
)
#{{{ cuda:
    # ' --with-mpi=mpich3 '
    # '--with-nocross-compiler-suite=pgi'
    # --with-libcudart=
    # $NVIDIA_PATH/cuda # lib64/
    # $CRAY_CUDATOOLKIT_DIR # lib64/
    # /p/software/juwelsbooster/stages/2022/software/CUDA/11.5
    # --with-libcuda-lib=
    # e $NVIDIA_PATH/cuda/lib64/stubs # /opt/nvidia/hpc_sdk/Linux_x86_64/21.3/cuda/lib64/stubs
    # e $CRAY_CUDATOOLKIT_DIR/lib64/stubs # /usr/local/cuda-11.0/lib64/stubs
    # --with-libcuda-include=
    # $NVIDIA_PATH/cuda/include
    # $CRAY_CUDATOOLKIT_DIR/include
    # --with-libcupti=
    # $NVIDIA_PATH/cuda/11.2/extras/CUPTI
    # $CRAY_CUDATOOLKIT_DIR/extras/CUPTI
    # '--with-libOpenCL=CUDA/11.5/targets/x86_64-linux'
    # $NVIDIA_PATH/cuda/lib64
    # e $CRAY_CUDATOOLKIT_DIR/lib64/ # /usr/local/cuda-11.0/lib64/
    # bfd:
    # rpm -ql binutils-devel-2.35.1-7.18.1.x86_64 |q bfd
    # 23:/usr/lib64/libbfd.a
    # rpm -ql binutils-2.35.1-7.18.1.x86_64 |q bfd
    # 1341:/usr/lib64/libbfd-2.35.1.20201123-7.18.so
    # '--with-libbfd-include=/p/software/juwelsbooster/stages/2022/software/binutils/2.37-GCCcore-11.2.0/include'
    # '--with-libbfd-lib=/p/software/juwelsbooster/stages/2022/software/binutils/2.37-GCCcore-11.2.0/lib'
#}}}
sanity_check_paths = {
    'files': ['bin/scorep', 'include/scorep/SCOREP_User.h',
              ('lib/backend/libscorep_adapter_mpi_event.a',
              'lib/libscorep_adapter_mpi_event.so')],
    'dirs': [],
}

# Ensure that local metric documentation is found by Cube GUI
modextrapaths = {'CUBE_DOCPATH': 'share/doc/scorep/profile'}
modextravars = {'CRAYPE_LINK_TYPE': 'dynamic'}

moduleclass = 'perf'
